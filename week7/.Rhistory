index <- 1
for(i in unique(experimental_cavity_area$Condition)){
for(j in unique(relabeled_cavities$HexamerStrength)){
for(k in unique(relabeled_cavities$BindingRate)){
simulation <- relabeled_cavities %>% filter(HexamerStrength == j) %>% filter(BindingRate == k) %>% select(CavityAreaHexamers)
experiment <- experimental_cavity_area %>% filter(Condition == i) %>% select(CavityAreaHexamers)
ks <- ks.test(experiment,simulation)
ksTests$Experiment[index] <- i
ksTests$HexamerStrength[index] <- j
ksTests$BindingRate[index] <- k
ksTests$D[index] <- ks$statistic
ksTests$P[index] <- ks$p.value
index <- index + 1
}
}
}
index <- 1
for(i in unique(experimental_cavity_area$Condition)){
for(j in unique(relabeled_cavities$HexamerStrength)){
for(k in unique(relabeled_cavities$BindingRate)){
simulation <- relabeled_cavities %>% filter(HexamerStrength == j) %>% filter(BindingRate == k)
experiment <- experimental_cavity_area %>% filter(Condition == i)
ks <- ks.test(experiment$CavityAreaHexamers,simulation$CavityAreaHexamers)
ksTests$Experiment[index] <- i
ksTests$HexamerStrength[index] <- j
ksTests$BindingRate[index] <- k
ksTests$D[index] <- ks$statistic
ksTests$P[index] <- ks$p.value
index <- index + 1
}
}
}
View(simulation)
simulation <- simulation %>% select(-c(SurfaceAreaCADomain,Coverage,CavityAreaAngstroms))
View(simulation)
simulation <- simulation %>% select(c(CavityAreaHexamers))
View(simulation)
View(relabeled_cavities)
simulation <- simulation %>% select(-c(SurfaceAreaCADomain,Coverage,CavityAreaAngstroms,HexamerStrength,BindingRate,Timepoint,maxTimepoint))
simulation <- relabeled_cavities %>% filter(HexamerStrength == j) %>% filter(BindingRate == k)
simulation <- simulation %>% select(-c(SurfaceAreaCADomain,Coverage,CavityAreaAngstroms,HexamerStrength,BindingRate,Timepoint,maxTimepoint))
View(simulation)
View(simulation)
View(cavity_area)
simulation <- cavity_area %>% filter(HexamerStrength == j) %>% filter(BindingRate == k)
View(simulation)
#Stat Tests for Best Simulation of Experimental Data
ksTests <- data.frame(Experiment=character(),HexamerStrength=character(),BindingRate=character(),D=numeric(),P=numeric())
index <- 1
for(i in unique(experimental_cavity_area$Condition)){
for(j in unique(cavity_area$HexamerStrength)){
for(k in unique(cavity_area$BindingRate)){
simulation <- cavity_area %>% filter(HexamerStrength == j) %>% filter(BindingRate == k)
experiment <- experimental_cavity_area %>% filter(Condition == i)
ks <- ks.test(experiment$CavityAreaHexamers,simulation$CavityAreaHexamers)
ksTests$Experiment[index] <- i
ksTests$HexamerStrength[index] <- j
ksTests$BindingRate[index] <- k
ksTests$D[index] <- ks$statistic
ksTests$P[index] <- ks$p.value
index <- index + 1
}
}
}
View(simulation)
simulation <- cavity_area %>% filter(HexamerStrength == j) %>% filter(BindingRate == k) %>% select(CavityAreaHexamers)
View(simulation)
#Stat Tests for Best Simulation of Experimental Data
ksTests <- data.frame(Experiment=character(),HexamerStrength=character(),BindingRate=character(),D=numeric(),P=numeric())
index <- 1
for(i in unique(experimental_cavity_area$Condition)){
for(j in unique(relabeled_cavities$HexamerStrength)){
for(k in unique(relabeled_cavities$BindingRate)){
simulation <- relabeled_cavities %>% filter(HexamerStrength == j) %>% filter(BindingRate == k) %>% ungroup() %>% select(CavityAreaHexamers)
experiment <- experimental_cavity_area %>% filter(Condition == i) %>% ungroup() %>% select(CavityAreaHexamers)
ks <- ks.test(experiment,simulation)
ksTests$Experiment[index] <- i
ksTests$HexamerStrength[index] <- j
ksTests$BindingRate[index] <- k
ksTests$D[index] <- ks$statistic
ksTests$P[index] <- ks$p.value
index <- index + 1
}
}
}
View(simulation)
View(experiment)
View(ksTests)
ks <- ks.test(experiment$CavityAreaHexamers,simulation$CavityAreaHexamers)
View(ks)
#Stat Tests for Best Simulation of Experimental Data
ksTests <- data.frame(Experiment=character(),HexamerStrength=character(),BindingRate=character(),D=numeric(),P=numeric())
index <- 1
for(i in unique(experimental_cavity_area$Condition)){
for(j in unique(relabeled_cavities$HexamerStrength)){
for(k in unique(relabeled_cavities$BindingRate)){
simulation <- relabeled_cavities %>% filter(HexamerStrength == j) %>% filter(BindingRate == k) %>% ungroup() %>% select(CavityAreaHexamers)
experiment <- experimental_cavity_area %>% filter(Condition == i) %>% ungroup() %>% select(CavityAreaHexamers)
ks <- ks.test(experiment$CavityAreaHexamers,simulation$CavityAreaHexamers)
ksTests$Experiment[index] <- i
ksTests$HexamerStrength[index] <- j
ksTests$BindingRate[index] <- k
ksTests$D[index] <- ks$statistic
ksTests$P[index] <- ks$p.value
index <- index + 1
}
}
}
#Stat Tests for Best Simulation of Experimental Data
ksTests <- data.frame(Experiment=character(),HexamerStrength=character(),BindingRate=character(),D=numeric(),P=numeric())
index <- 1
for(i in unique(experimental_cavity_area$Condition)){
for(j in unique(relabeled_cavities$HexamerStrength)){
for(k in unique(relabeled_cavities$BindingRate)){
simulation <- relabeled_cavities %>% filter(HexamerStrength == j) %>% filter(BindingRate == k) %>% ungroup() %>% select(CavityAreaHexamers)
experiment <- experimental_cavity_area %>% filter(Condition == i) %>% ungroup() %>% select(CavityAreaHexamers)
ks <- ks.test(experiment$CavityAreaHexamers,simulation$CavityAreaHexamers)
ksTests$Experiment[index] <- i
ksTests$HexamerStrength[index] <- j
ksTests$BindingRate[index] <- k
ksTests$D[index] <- ks$statistic
ksTests$P[index] <- ks$p.value
index <- index + 1
return(index)
}
}
}
#Stat Tests for Best Simulation of Experimental Data
ksTests <- data.frame(Experiment=character(),HexamerStrength=character(),BindingRate=character(),D=numeric(),P=numeric())
index <- 1
for(i in unique(experimental_cavity_area$Condition)){
for(j in unique(relabeled_cavities$HexamerStrength)){
for(k in unique(relabeled_cavities$BindingRate)){
simulation <- relabeled_cavities %>% filter(HexamerStrength == j) %>% filter(BindingRate == k) %>% ungroup() %>% select(CavityAreaHexamers)
experiment <- experimental_cavity_area %>% filter(Condition == i) %>% ungroup() %>% select(CavityAreaHexamers)
ks <- ks.test(experiment$CavityAreaHexamers,simulation$CavityAreaHexamers)
ksTests$Experiment[index] <- i
ksTests$HexamerStrength[index] <- j
ksTests$BindingRate[index] <- k
ksTests$D[index] <- ks$statistic
ksTests$P[index] <- ks$p.value
index <<- index + 1
}
}
}
#Stat Tests for Best Simulation of Experimental Data
ksTests <- data.frame(Experiment=character(),HexamerStrength=character(),BindingRate=character(),D=numeric(),P=numeric())
index <- 1
for(i in unique(experimental_cavity_area$Condition)){
for(j in unique(relabeled_cavities$HexamerStrength)){
for(k in unique(relabeled_cavities$BindingRate)){
simulation <- relabeled_cavities %>% filter(HexamerStrength == j) %>% filter(BindingRate == k) %>% ungroup() %>% select(CavityAreaHexamers)
experiment <- experimental_cavity_area %>% filter(Condition == i) %>% ungroup() %>% select(CavityAreaHexamers)
ks <- ks.test(experiment$CavityAreaHexamers,simulation$CavityAreaHexamers)
ksTests$Experiment[index] <- i
ksTests$HexamerStrength[index] <- j
ksTests$BindingRate[index] <- k
ksTests$D[index] <- ks$statistic
ksTests$P[index] <- ks$p.value
index <<- index + 1
return(index,ksTests)
}
return(index,ksTests)
}
return(index,ksTests)
}
View(ks)
ksTests$P[index] <- ks$p.value
View(ksTests)
#Stat Tests for Best Simulation of Experimental Data
ksTests <- data.frame(Experiment,HexamerStrength,BindingRate,D,P)
#Stat Tests for Best Simulation of Experimental Data
ksTests <- data.frame(c(Experiment,HexamerStrength,BindingRate,D,P))
#Stat Tests for Best Simulation of Experimental Data
ksTests <- data.frame(c("Experiment","HexamerStrength","BindingRate","D","P"))
View(ksTests)
#Stat Tests for Best Simulation of Experimental Data
ksTests <- data.frame(matrix(ncol=5,nrow=0,dimnames=list(NULL,c("Experiment","HexamerStrength","BindingRate","D","P")))
View(ksTests)
View(ksTests)
#Stat Tests for Best Simulation of Experimental Data
ksTests <- data.frame(matrix(ncol=5,nrow=0,dimnames=list(c("Experiment","HexamerStrength","BindingRate","D","P")))
#Stat Tests for Best Simulation of Experimental Data
ksTests <- data.frame(matrix(ncol=5,nrow=0)
#Stat Tests for Best Simulation of Experimental Data
ksTests <- data.frame(matrix(ncol=5,nrow=0)
#Stat Tests for Best Simulation of Experimental Data
ksTests <- data.frame(matrix(ncol=5,nrow=0)
#Stat Tests for Best Simulation of Experimental Data
ksTests <- data.frame(matrix(ncol=5,nrow=0)
#Stat Tests for Best Simulation of Experimental Data
ksTests <- data.frame(matrix(ncol=5,nrow=0))
#Stat Tests for Best Simulation of Experimental Data
ksTests <- data.frame(matrix(ncol=5,nrow=0))
#Stat Tests for Best Simulation of Experimental Data
ksTests <- data.frame(matrix(ncol=5,nrow=0),dimnames=list(c("Experiment","HexamerStrength","BindingRate","D","P"))))
#Stat Tests for Best Simulation of Experimental Data
ksTests <- data.frame(matrix(ncol=5,nrow=0),dimnames=list(c("Experiment","HexamerStrength","BindingRate","D","P")))
#Stat Tests for Best Simulation of Experimental Data
ksTests <- data.frame(matrix(ncol=5,nrow=0),dimnames=list(NULL,c("Experiment","HexamerStrength","BindingRate","D","P")))
#Stat Tests for Best Simulation of Experimental Data
ksTests <- data.frame(matrix(ncol=5,nrow=0),dimnames=list(c("Experiment","HexamerStrength","BindingRate","D","P"),NULL))
#Stat Tests for Best Simulation of Experimental Data
ksTests <- setNames(data.frame(matrix(ncol=5,nrow=0),c("Experiment","HexamerStrength","BindingRate","D","P")))
#Stat Tests for Best Simulation of Experimental Data
ksTests <- setNames(data.frame(matrix(ncol=length(col),nrow=0),col <- c("Experiment","HexamerStrength","BindingRate","D","P")))
#Stat Tests for Best Simulation of Experimental Data
ksTests <- setNames(data.frame(matrix(ncol=length(col),nrow=0)),col <- c("Experiment","HexamerStrength","BindingRate","D","P"))
View(ksTests)
source("~/Library/CloudStorage/OneDrive-JohnsHopkins/GAG Strucutre/RemodelingSim/CavityAreaAnalysis.R", echo=TRUE)
# Establish Environment
library(tidyverse)
library(ggthemes)
library(ggh4x)
library(cowplot)
# Functions for Plotting Equations on GGplot
lm_eqn <- function(df, x_col, y_col) {
m <- lm(as.formula(paste(y_col, "~", x_col)), data = df)
a <- format(coef(m)[1], digits = 4)
b <- format(coef(m)[2], digits = 4)
r2 <- format(summary(m)$r.squared, digits = 4)
eq <- paste0("italic(y) == ", a, " + ", b, " * italic(x) * ",
"~~ italic(r)^2 ~ '=' ~ ", r2)
as.character(as.expression(eq))
}
# Add Nice Titles to Graphs
draw_label_theme <- function(label, theme = NULL, element = "text", ...) {
if (is.null(theme)) {
theme <- ggplot2::theme_get()
}
if (!element %in% names(theme)) {
stop("Element must be a valid ggplot theme element name")
}
elements <- ggplot2::calc_element(element, theme)
cowplot::draw_label(label,
fontfamily = elements$family,
fontface = elements$face,
colour = elements$color,
size = elements$size,
...
)
}
# Import Data
cavity_area <- read.csv("~/OneDrive - Johns Hopkins/GAG Strucutre/RemodelingSim/AllCavities.txt",colClasses = c("numeric","numeric","numeric","numeric","character","character","character","numeric"))
d25n_cavity_area <- read.csv("~/OneDrive - Johns Hopkins/GAG Strucutre/RemodelingSim/Re_ Experimental Cavity Area/d25n_scaled_detail.txt",colClasses = c("character","numeric","numeric","numeric","numeric","numeric","numeric"))
hGag_cavity_area <- read.csv("~/OneDrive - Johns Hopkins/GAG Strucutre/RemodelingSim/Re_ Experimental Cavity Area/hGag_scaled_detail.txt",colClasses = c("character","numeric","numeric","numeric","numeric","numeric","numeric"))
# Remove 562kBT Hexamers, as they consist of multiple islands that don't closely model actual hexamer assembly
cavity_area <- filter(cavity_area,HexamerStrength != 562)
# Convert Binding Rate and Hexamer Strength to Factors for visualization purposes
cavity_area <- cavity_area %>% mutate_at(vars(BindingRate),funs(factor(., levels=unique(.))))
cavity_area <- cavity_area %>% mutate_at(vars(HexamerStrength),funs(factor(., levels=unique(.))))
# Filter by Hexamer Strength, Binding Rate, Trace ID, and Timepoint, then removes the open border of the sphere
cavity_area <- cavity_area %>% group_by(HexamerStrength,BindingRate,TraceID,Timepoint) %>% filter(CavityAreaHexamers != max(CavityAreaHexamers))
# Remove the open border for experimental datasets
d25n_cavity_area <- d25n_cavity_area %>% group_by(VLPNumber) %>% filter(HexamerCavityArea != max(HexamerCavityArea))
hGag_cavity_area <- hGag_cavity_area %>% group_by(VLPNumber) %>% filter(HexamerCavityArea != max(HexamerCavityArea))
# Combine Experimental Datasets into a Single Data Frame and Restructure to Merge with Simulation Data
d25n_cavity_area <- d25n_cavity_area %>% mutate(Condition = "d25n")
hGag_cavity_area <- hGag_cavity_area %>% mutate(Condition = "hGag")
experimental_cavity_area <- bind_rows(d25n_cavity_area,hGag_cavity_area)
experimental_cavity_area <- rename(experimental_cavity_area,c(SurfaceAreaCADomain = 'SurfaceArea', Coverage = 'PercentCoverage', CavityAreaAngstroms = 'CavityArea', CavityAreaHexamers = 'HexamerCavityArea'))
experimental_cavity_area <- experimental_cavity_area %>% select(-c(Hexamers,CavityPerimeter))
experimental_cavity_area <- experimental_cavity_area %>% relocate(VLPumber,.after = Condition)
# Filter for cavities with an area that is at least equal to the area of half of a hexamer, as the experimental data only has sufficient resolution to view hexamers with 3 or more subunits.
cavity_area <- cavity_area %>% filter(CavityAreaHexamers >= 0.50)
experimental_cavity_area <- experimental_cavity_area %>% filter(CavityAreaHexamers >= 0.50)
#Bin data by Timepoints
finalTimes <- cavity_area %>% group_by(HexamerStrength,BindingRate,TraceID) %>% summarize(maxTimepoint = max(Timepoint))
timepointed_cavities <- cavity_area %>% left_join(y=finalTimes, by=c("HexamerStrength","BindingRate","TraceID"))
timepointed_cavities <- timepointed_cavities %>% rowwise() %>% mutate(TimepointBins = cut(Timepoint,breaks=c(0,0.1*maxTimepoint,0.2*maxTimepoint,0.3*maxTimepoint,0.4*maxTimepoint,0.5*maxTimepoint,0.6*maxTimepoint,0.7*maxTimepoint,0.8*maxTimepoint,0.9*maxTimepoint,maxTimepoint),labels=c('First Tenth','Second Tenth','Third Tenth','Fourth Tenth', 'Fifth Tenth', 'Sixth Tenth', 'Seventh Tenth', 'Eighth Tenth', 'Ninth Tenth', 'Tenth Tenth')))
# Relabel Facets
relabeled_cavities <- timepointed_cavities
levels(relabeled_cavities$HexamerStrength) <- c('-11.62kBT','-7.62kBT','-9.62kBT')
levels(relabeled_cavities$BindingRate) <- c('0.015/uMS','0.15/uMS','1.5/uMS')
# Visualize Cavities
SimulatedCavityBox <- ggplot() +
geom_boxplot(relabeled_cavities,mapping = aes(x=CavityAreaHexamers,y=BindingRate),
position="identity",width=0.75) +
facet_grid(.~factor(HexamerStrength,levels=c('-7.62kBT','-9.62kBT','-11.62kBT'))) +
theme_base(base_size = 10) +
labs(title="Simulated Data",
x="Area of Cavity (In Hexamer Areas)",
y="Binding Rate") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
theme(plot.title = element_text(hjust = 0.5)) +
xlim(0,100) +
coord_flip()+
scale_color_colorblind()
SimulatedCavityBox
ExperimentalCavityBox <- ggplot() +
geom_boxplot(experimental_cavity_area,mapping = aes(x=CavityAreaHexamers,y=0),
position="identity",width=1/length(unique(relabeled_cavities$BindingRate))) +
ylim(-1,1) +
facet_grid(.~factor(Condition,levels=c('d25n','hGag'))) +
theme_base(base_size = 10) +
theme(axis.title.x=element_blank(),axis.text.x=element_blank(),axis.ticks.x=element_blank()) +
labs(title="Experimental Data",
x="Area of Cavity (In Hexamer Areas)") +
theme(plot.title = element_text(hjust = 0.5)) +
xlim(0,100) +
coord_flip()+
scale_color_colorblind()
ExperimentalCavityBox
title_gg <- ggdraw() +
draw_label_theme("Gag Lattice Cavity Areas",theme = theme_base(),element = "plot.title",x = 0.5, hjust = 0.5, vjust = 1) +
theme(plot.background = element_rect(fill="#FFFFFF", color = NA))
combinedCavityBox <- cowplot::plot_grid(SimulatedCavityBox,ExperimentalCavityBox)
labeledCavityBox <- cowplot::plot_grid(title_gg,combinedCavityBox,ncol=1,rel_heights=c(0.15,1))
labeledCavityBox
#Stat Tests for Best Simulation of Experimental Data
ksTests <- setNames(data.frame(matrix(ncol=length(col),nrow=0)),col <- c("Experiment","HexamerStrength","BindingRate","D","P"))
index <- 1
for(i in unique(experimental_cavity_area$Condition)){
for(j in unique(relabeled_cavities$HexamerStrength)){
for(k in unique(relabeled_cavities$BindingRate)){
simulation <- relabeled_cavities %>% filter(HexamerStrength == j) %>% filter(BindingRate == k) %>% ungroup() %>% select(CavityAreaHexamers)
experiment <- experimental_cavity_area %>% filter(Condition == i) %>% ungroup() %>% select(CavityAreaHexamers)
ks <- ks.test(experiment$CavityAreaHexamers,simulation$CavityAreaHexamers)
ksTests$Experiment[index] <- i
ksTests$HexamerStrength[index] <- j
ksTests$BindingRate[index] <- k
ksTests$D[index] <- ks$statistic
ksTests$P[index] <- ks$p.value
index <<- index + 1
return(index,ksTests)
}
}
}
index <- 1
for(i in unique(experimental_cavity_area$Condition)){
for(j in unique(relabeled_cavities$HexamerStrength)){
for(k in unique(relabeled_cavities$BindingRate)){
simulation <- relabeled_cavities %>% filter(HexamerStrength == j) %>% filter(BindingRate == k) %>% ungroup() %>% select(CavityAreaHexamers)
experiment <- experimental_cavity_area %>% filter(Condition == i) %>% ungroup() %>% select(CavityAreaHexamers)
ks <- ks.test(experiment$CavityAreaHexamers,simulation$CavityAreaHexamers)
ksTests$Experiment[index] <- i
ksTests$HexamerStrength[index] <- j
ksTests$BindingRate[index] <- k
ksTests$D[index] <- ks$statistic
ksTests$P[index] <- ks$p.value
index <<- index + 1
}
}
}
for(i in unique(experimental_cavity_area$Condition)){
for(j in unique(relabeled_cavities$HexamerStrength)){
for(k in unique(relabeled_cavities$BindingRate)){
simulation <- relabeled_cavities %>% filter(HexamerStrength == j) %>% filter(BindingRate == k) %>% ungroup() %>% select(CavityAreaHexamers)
experiment <- experimental_cavity_area %>% filter(Condition == i) %>% ungroup() %>% select(CavityAreaHexamers)
ks <- ks.test(experiment$CavityAreaHexamers,simulation$CavityAreaHexamers)
ksTests <- rbind(ksTests,data.frame(Experiment = i, HexamerStrength = j, BindingRate = k, D = ks$statistic, p = ks$p.value))
}
}
}
View(ksTests)
bestSimulations <- ksTests %>% group_by(Experiment) %>% filter(D = min(D))
bestSimulations <- ksTests %>% group_by(Experiment) %>% filter(D == min(D))
View(bestSimulations)
View(ksTests)
View(bestSimulations)
ggsave("~/OneDrive - Johns Hopkins/GAG Strucutre/RemodelingSim/Experimental_and_Simulated_Gag_Lattice_Cavities.png",labeledCavityBox)
View(bestSimulations)
View(ksTests)
source("~/Library/CloudStorage/OneDrive-JohnsHopkins/GAG Strucutre/RemodelingSim/CavityAreaAnalysis.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-JohnsHopkins/GAG Strucutre/RemodelingSim/CavityAreaAnalysis.R", echo=TRUE)
# Required Package
# install.packages("ggh4x")
# Establish Environment
library(tidyverse)
library(ggthemes)
library(ggh4x)
library(cowplot)
# Functions for Plotting Equations on GGplot
lm_eqn <- function(df, x_col, y_col) {
m <- lm(as.formula(paste(y_col, "~", x_col)), data = df)
a <- format(coef(m)[1], digits = 4)
b <- format(coef(m)[2], digits = 4)
r2 <- format(summary(m)$r.squared, digits = 4)
eq <- paste0("italic(y) == ", a, " + ", b, " * italic(x) * ",
"~~ italic(r)^2 ~ '=' ~ ", r2)
as.character(as.expression(eq))
}
# Add Nice Titles to Graphs
draw_label_theme <- function(label, theme = NULL, element = "text", ...) {
if (is.null(theme)) {
theme <- ggplot2::theme_get()
}
if (!element %in% names(theme)) {
stop("Element must be a valid ggplot theme element name")
}
elements <- ggplot2::calc_element(element, theme)
cowplot::draw_label(label,
fontfamily = elements$family,
fontface = elements$face,
colour = elements$color,
size = elements$size,
...
)
}
# Import Data
cavity_area <- read.csv("~/OneDrive - Johns Hopkins/GAG Strucutre/RemodelingSim/AllCavities.txt",colClasses = c("numeric","numeric","numeric","numeric","character","character","character","numeric"))
d25n_cavity_area <- read.csv("~/OneDrive - Johns Hopkins/GAG Strucutre/RemodelingSim/Re_ Experimental Cavity Area/d25n_scaled_detail.txt",colClasses = c("character","numeric","numeric","numeric","numeric","numeric","numeric"))
hGag_cavity_area <- read.csv("~/OneDrive - Johns Hopkins/GAG Strucutre/RemodelingSim/Re_ Experimental Cavity Area/hGag_scaled_detail.txt",colClasses = c("character","numeric","numeric","numeric","numeric","numeric","numeric"))
# Remove 562kBT Hexamers, as they consist of multiple islands that don't closely model actual hexamer assembly
cavity_area <- filter(cavity_area,HexamerStrength != 562)
# Convert Binding Rate and Hexamer Strength to Factors for visualization purposes
cavity_area <- cavity_area %>% mutate_at(vars(BindingRate),funs(factor(., levels=unique(.))))
cavity_area <- cavity_area %>% mutate_at(vars(HexamerStrength),funs(factor(., levels=unique(.))))
# Bin Data into the percentage coverage groups
#cavity_area <- cavity_area %>% mutate(Coverage = cut(Coverage,breaks=c(0.15, 0.30, 0.45, 0.60,0.75,1),labels = c('17%','33%','50%','67%','84%')))
# Filter by Hexamer Strength, Binding Rate, Trace ID, and Timepoint, then removes the open border of the sphere
cavity_area <- cavity_area %>% group_by(HexamerStrength,BindingRate,TraceID,Timepoint) %>% filter(CavityAreaHexamers != max(CavityAreaHexamers))
# Remove the open border for experimental datasets
d25n_cavity_area <- d25n_cavity_area %>% group_by(VLPNumber) %>% filter(HexamerCavityArea != max(HexamerCavityArea))
hGag_cavity_area <- hGag_cavity_area %>% group_by(VLPNumber) %>% filter(HexamerCavityArea != max(HexamerCavityArea))
# Combine Experimental Datasets into a Single Data Frame and Restructure to Merge with Simulation Data
d25n_cavity_area <- d25n_cavity_area %>% mutate(Condition = "d25n")
hGag_cavity_area <- hGag_cavity_area %>% mutate(Condition = "hGag")
experimental_cavity_area <- bind_rows(d25n_cavity_area,hGag_cavity_area)
experimental_cavity_area <- rename(experimental_cavity_area,c(SurfaceAreaCADomain = 'SurfaceArea', Coverage = 'PercentCoverage', CavityAreaAngstroms = 'CavityArea', CavityAreaHexamers = 'HexamerCavityArea'))
experimental_cavity_area <- experimental_cavity_area %>% select(-c(Hexamers,CavityPerimeter))
experimental_cavity_area <- experimental_cavity_area %>% relocate(VLPumber,.after = Condition)
labeledCavityBox
source("~/Library/CloudStorage/OneDrive-JohnsHopkins/GAG Strucutre/RemodelingSim/CavityAreaAnalysis.R", echo=TRUE)
# Visualize Cavities
SimulatedCavityBox <- ggplot() +
geom_boxplot(relabeled_cavities,mapping = aes(x=CavityAreaHexamers,y=BindingRate),
position="identity",width=0.75) +
facet_grid(.~factor(HexamerStrength,levels=c('-7.62kBT','-9.62kBT','-11.62kBT'))) +
theme_base(base_size = 10) +
labs(title="Simulated Data",
x="Area of Cavity (In Hexamer Areas)",
y="Binding Rate") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
theme(plot.title = element_text(hjust = 0.5)) +
xlim(0,100) +
coord_flip()+
scale_color_colorblind()
# Import Data
cavity_area <- read.csv("~/OneDrive - Johns Hopkins/GAG Strucutre/RemodelingSim/AllCavities.txt",colClasses = c("numeric","numeric","numeric","numeric","character","character","character","numeric"))
d25n_cavity_area <- read.csv("~/OneDrive - Johns Hopkins/GAG Strucutre/RemodelingSim/Re_ Experimental Cavity Area/d25n_scaled_detail.txt",colClasses = c("character","numeric","numeric","numeric","numeric","numeric","numeric"))
hGag_cavity_area <- read.csv("~/OneDrive - Johns Hopkins/GAG Strucutre/RemodelingSim/Re_ Experimental Cavity Area/hGag_scaled_detail.txt",colClasses = c("character","numeric","numeric","numeric","numeric","numeric","numeric"))
# Remove 562kBT Hexamers, as they consist of multiple islands that don't closely model actual hexamer assembly
cavity_area <- filter(cavity_area,HexamerStrength != 562)
# Convert Binding Rate and Hexamer Strength to Factors for visualization purposes
cavity_area <- cavity_area %>% mutate_at(vars(BindingRate),funs(factor(., levels=unique(.))))
cavity_area <- cavity_area %>% mutate_at(vars(HexamerStrength),funs(factor(., levels=unique(.))))
# Filter by Hexamer Strength, Binding Rate, Trace ID, and Timepoint, then removes the open border of the sphere
cavity_area <- cavity_area %>% group_by(HexamerStrength,BindingRate,TraceID,Timepoint) %>% filter(CavityAreaHexamers != max(CavityAreaHexamers))
# Remove the open border for experimental datasets
d25n_cavity_area <- d25n_cavity_area %>% group_by(VLPNumber) %>% filter(HexamerCavityArea != max(HexamerCavityArea))
hGag_cavity_area <- hGag_cavity_area %>% group_by(VLPNumber) %>% filter(HexamerCavityArea != max(HexamerCavityArea))
# Combine Experimental Datasets into a Single Data Frame and Restructure to Merge with Simulation Data
d25n_cavity_area <- d25n_cavity_area %>% mutate(Condition = "d25n")
hGag_cavity_area <- hGag_cavity_area %>% mutate(Condition = "hGag")
experimental_cavity_area <- bind_rows(d25n_cavity_area,hGag_cavity_area)
experimental_cavity_area <- rename(experimental_cavity_area,c(SurfaceAreaCADomain = 'SurfaceArea', Coverage = 'PercentCoverage', CavityAreaAngstroms = 'CavityArea', CavityAreaHexamers = 'HexamerCavityArea'))
experimental_cavity_area <- experimental_cavity_area %>% select(-c(Hexamers,CavityPerimeter))
experimental_cavity_area <- experimental_cavity_area %>% relocate(VLPumber,.after = Condition)
# Filter for cavities with an area that is at least equal to the area of half of a hexamer, as the experimental data only has sufficient resolution to view hexamers with 3 or more subunits.
cavity_area <- cavity_area %>% filter(CavityAreaHexamers >= 0.50)
experimental_cavity_area <- experimental_cavity_area %>% filter(CavityAreaHexamers >= 0.50)
#Bin data by Timepoints
finalTimes <- cavity_area %>% group_by(HexamerStrength,BindingRate,TraceID) %>% summarize(maxTimepoint = max(Timepoint))
timepointed_cavities <- cavity_area %>% left_join(y=finalTimes, by=c("HexamerStrength","BindingRate","TraceID"))
timepointed_cavities <- timepointed_cavities %>% rowwise() %>% mutate(TimepointBins = cut(Timepoint,breaks=c(0,0.1*maxTimepoint,0.2*maxTimepoint,0.3*maxTimepoint,0.4*maxTimepoint,0.5*maxTimepoint,0.6*maxTimepoint,0.7*maxTimepoint,0.8*maxTimepoint,0.9*maxTimepoint,maxTimepoint),labels=c('First Tenth','Second Tenth','Third Tenth','Fourth Tenth', 'Fifth Tenth', 'Sixth Tenth', 'Seventh Tenth', 'Eighth Tenth', 'Ninth Tenth', 'Tenth Tenth')))
# Relabel Facets
relabeled_cavities <- timepointed_cavities
levels(relabeled_cavities$HexamerStrength) <- c('-11.62kBT','-7.62kBT','-9.62kBT')
levels(relabeled_cavities$BindingRate) <- c('0.015/uMS','0.15/uMS','1.5/uMS')
# Visualize Cavities
SimulatedCavityBox <- ggplot() +
geom_boxplot(relabeled_cavities,mapping = aes(x=CavityAreaHexamers,y=BindingRate),
position="identity",width=0.75) +
facet_grid(.~factor(HexamerStrength,levels=c('-7.62kBT','-9.62kBT','-11.62kBT'))) +
theme_base(base_size = 10) +
labs(title="Simulated Data",
x="Area of Cavity (In Hexamer Areas)",
y="Binding Rate") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
theme(plot.title = element_text(hjust = 0.5)) +
xlim(0,100) +
coord_flip()+
scale_color_colorblind()
SimulatedCavityBox
ExperimentalCavityBox <- ggplot() +
geom_boxplot(experimental_cavity_area,mapping = aes(x=CavityAreaHexamers,y=0),
position="identity",width=1/length(unique(relabeled_cavities$BindingRate))) +
ylim(-1,1) +
facet_grid(.~factor(Condition,levels=c('d25n','hGag'))) +
theme_base(base_size = 10) +
theme(axis.title.x=element_blank(),axis.text.x=element_blank(),axis.ticks.x=element_blank()) +
labs(title="Experimental Data",
x="Area of Cavity (In Hexamer Areas)") +
theme(plot.title = element_text(hjust = 0.5)) +
xlim(0,100) +
coord_flip()+
scale_color_colorblind()
ExperimentalCavityBox
title_gg <- ggdraw() +
draw_label_theme("Gag Lattice Cavity Areas",theme = theme_base(),element = "plot.title",x = 0.5, hjust = 0.5, vjust = 1) +
theme(plot.background = element_rect(fill="#FFFFFF", color = NA))
combinedCavityBox <- cowplot::plot_grid(SimulatedCavityBox,ExperimentalCavityBox)
labeledCavityBox <- cowplot::plot_grid(title_gg,combinedCavityBox,ncol=1,rel_heights=c(0.15,1))
labeledCavityBox
View(experimental_cavity_area)
source("~/Library/CloudStorage/OneDrive-JohnsHopkins/GAG Strucutre/RemodelingSim/CavityAreaAnalysis.R", echo=TRUE)
SimulatedCavityBox
ExperimentalCavityBox
SimulatedCavityBox
ExperimentalCavityBox
source("~/qbb2024-answers/week7/homeworkWeek7.R", echo=TRUE)
